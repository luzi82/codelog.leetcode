三個方法：

1. 超暴力解， runtime = O( 2^C * R * C )

Test case:

R0 = 0,0,0
R1 = 0,0,1
R2 = 1,1,0

嘗試所有可行的 flip 方法，有 8=(2^C) 個方法：

F0 = 0,0,0
F1 = 0,0,1
F2 = 0,1,0
F3 = 0,1,1
F4 = 1,0,0
F5 = 1,0,1
F6 = 1,1,0
F7 = 1,1,1

在 F0, 有 1 個全0

F0+R0 = 0,0,0
F0+R1 = 0,0,1
F0+R2 = 1,1,0

在 F1, 有 1 個全0, 1 個全1

F1+R0 = 0,0,1
F1+R1 = 0,0,0
F1+R2 = 1,1,1

在 F6, 有 1 個全0, 1 個全1

F6+R0 = 1,1,0
F6+R1 = 1,1,1
F6+R2 = 0,0,0

在 F7, 有 1 個全1

F0+R0 = 1,1,1
F0+R1 = 1,1,0
F0+R2 = 0,0,1

其他 F 沒有全0/全1

F0 = 0,0,0 < count = 1
F1 = 0,0,1 < count = 2
F2 = 0,1,0 < count = 0
F3 = 0,1,1 < count = 0
F4 = 1,0,0 < count = 0
F5 = 1,0,1 < count = 0
F6 = 1,1,0 < count = 2
F7 = 1,1,1 < count = 1

max(count) = 2
所以答案是 2

Runtime = O( 2^C * R * C ) , 保證 timeout

==============

2. 逐個比較， runtime = O( R * R * C )

Test case:

R0 = 0,0,0
R1 = 0,0,1
R2 = 1,1,0

方法 1 的問題在於測試 2^C 個 flip 的可能性
但我們根本不需要把所有可能性都測試
只需要按每個 row 做一次測試便可
當 R0=0,0,0 時，以 F0=R0=0,0,0 去 flip
當 R1=0,0,1 時，以 F1=R0=0,0,1 去 flip

F0=R0 = 0,0,0
F1=R1 = 0,0,1
F2=R2 = 1,1,0

在 F0, 有 1 個全0

F0+R0 = 0,0,0
F0+R1 = 0,0,1
F0+R2 = 1,1,0

在 F1, 有 1 個全0, 1 個全1

F1+R0 = 0,0,1
F1+R1 = 0,0,0
F1+R2 = 1,1,1

在 F2, 有 1 個全0, 1 個全1

F2+R0 = 1,1,0
F2+R1 = 1,1,1
F2+R2 = 0,0,0

列出所有 flip 的全0/全1總數

F0=R0 = 0,0,0 < count = 1
F1=R1 = 0,0,1 < count = 2
F2=R2 = 1,1,0 < count = 2

max(count) = 2
所以答案是 2

Runtime = O( R * R * C )
題目 R<=300, C<=300, 可能不會 timeout
但如果 R,C<=1000 就難說

==============

3. 歸類， runtime = O( R * C )

Test case:

R0 = 0,0,0
R1 = 0,0,1
R2 = 1,1,0

由於 R1 和 R2 是互相 invert 的關係
當 R1 被 flip 至 1,1,1 時， R2 就會變成 0,0,0
當 R1 被 flip 至 0,0,0 時， R2 就會變成 1,1,1
因此我們把兩者當成同一類

在 test case,所有 row 會被分成 2 group：

Group 1:
  R0 = 0,0,0

Group 2:
  R1 = 0,0,1
  R2 = 1,1,0

在一個 group 中，當其中一個 row 是全0/全1
所有同 group 的 row 都會變成全0/全1
其他 group 則不會有 全0/全1

由於最大的 group 的 count = 2
所以答案是 2


另一個 test case

R0 = 0,0,0
R1 = 0,0,1
R2 = 1,1,0
R3 = 1,0,1
R4 = 1,0,1
R5 = 0,1,0

這個所有 row 會分為 3 類

Group 1:
  R0 = 0,0,0

Group 2:
  R1 = 0,0,1
  R2 = 1,1,0

Group 3:
  R3 = 1,0,1
  R4 = 1,0,1
  R5 = 0,1,0

由於最大的 group 的 count = 3
所以答案是 3

為了方便分類，如果 row 第一個 col 是 1，就把整個 row flip 一次
否則就不 flip

R0 = 0,0,0 > 0,0,0
R1 = 0,0,1 > 0,0,1
R2 = 1,1,0 > 0,0,1
R3 = 1,0,1 > 0,1,0
R4 = 1,0,1 > 0,1,0
R5 = 0,1,0 > 0,1,0

然後簡單用 HashMap 記下每個 group 的數量

0,0,0 > 1
0,0,1 > 2
0,1,0 > 3

HashMap 的 get/set runtime = O(1)
所以總 runtime 是 O( R * C )
